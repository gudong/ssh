<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://www.springframework.org/schema/jee 
			http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-4.0.xsd"
		default-autowire="byName">

	<!-- properties for whole project, include db, mail etc. -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:mail.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- BoneCP configuration -->
    <bean id="mainDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClass}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--
        <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>
        <property name="idleMaxAge" value="${idleMaxAge}"/>      
        <property name="maxConnectionsPerPartition" value="${maxConnectionsPerPartition}"/>
        <property name="minConnectionsPerPartition" value="${minConnectionsPerPartition}"/>
        <property name="partitionCount" value="${partitionCount}"/>
        <property name="acquireIncrement" value="${acquireIncrement}"/>                              
        <property name="statementsCacheSize" value="${statementsCacheSize}"/>
        <property name="releaseHelperThreads" value="${releaseHelperThreads}"/>
        <property name="connectionTimeout" value="${connectionTimeout}"/>
        <property name="poolAvailabilityThreshold" value="${poolAvailabilityThreshold}"/>
        -->
    </bean> 
	 
	 <!-- Spring bean configuration. Tell Spring to bounce off BoneCP -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource" ref="mainDataSource"/>
    </bean>
	 
	<!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" /> 
    
        <property name="hibernateProperties">
            <props>
               <prop key="hibernate.service.jdbc.connections.spi.provider_class">com.jolbox.bonecp.provider.BoneCPConnectionProvider</prop>
               <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
               <prop key="hibernate.show_sql">true</prop>
               <prop key="hibernate.format_sql">true</prop>
               <prop key="hibernate.cache.use_query_cache">true</prop>
               <prop key="hibernate.cache.use_second_level_cache">true</prop>
               <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
            </props>
		</property> 
        <property name="mappingDirectoryLocations">
        	<list>
        		<value>classpath:com/forusoft/stock/dal/po</value>
        	</list>
        </property>
    </bean>
	 
	 
    <bean id="baseDao" class="com.forusoft.framework.dal.dao.impl.BaseDaoHibernate4Impl"/>
    
    <bean id="baseService" class="com.forusoft.framework.bll.service.impl.BaseServiceImpl"/>
	
    <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	    <property name="sessionFactory" ref="sessionFactory"/>
	</bean> 
	<!-- 激活在bean中定义的各种注解，@Transactional注解除外，它需要tx:annotation-driven激活 -->
    <context:annotation-config/>
	
	<tx:advice id="txAdvice" transaction-manager="txManager"> 
	    <tx:attributes>  
	        <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
	        <tx:method name="load*" propagation="REQUIRED" read-only="true" /> 
	        <tx:method name="find*" propagation="REQUIRED" isolation="READ_COMMITTED" read-only="true" timeout="-1" /> 
	        <tx:method name="query*" propagation="REQUIRED" isolation="READ_COMMITTED" read-only="true" timeout="-1" /> 
	        <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="-1" />
	        <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="-1" />
	        <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="-1" />
	        <tx:method name="bulkUpdate*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" timeout="-1" />
	        <tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" /> 
	        <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" /> 
	        <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/> 
	    </tx:attributes> 
	</tx:advice>  
	<!-- 
		execution(public * com.forusoft..service.impl.*ServiceImpl.*(..))
		public代表public方法
		第一个*代表所有的返回值类型 
	          第二个*代表所有的以ServiceImpl结尾的类
                     第三个*代表类所有方法 
                     
                     第一个..代表所有子包  
                     第二个..代表方法所有的参数
        execution(public * *(..))：任意公共方法
        execution(* set*(..))：任何一个以“set”开始的方法
        execution(* com.xyz.service.AccountService.*(..))：AccountService 接口的任意方法
        execution(* com.xyz.service..*.*(..))：定义在service包或者子包里的任意类的任意方法
	 -->
	<aop:config expose-proxy="false">
	    <aop:pointcut id="txPointcut" expression="execution(* com.forusoft..service..impl.*ServiceImpl.*(..))"/> 
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	<import resource="classpath:spring/applicationContext-dao.xml" />
	<import resource="classpath:spring/applicationContext-service.xml" />
</beans>